import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

dataset = pd.read_csv('train.csv')
dataset = dataset.drop(['Name','Cabin','Fare','Ticket', 'PassengerId' ], axis = 1)
summary=dataset.describe(include="all")
count_null=dataset.isnull().sum()
dataset['Age'] = dataset['Age'].replace(np.nan, 0)
dataset['Embarked']= dataset['Embarked'].fillna(dataset['Embarked'].mode()[0])
count_null=dataset.isnull().sum()
x = dataset.iloc[:, 1:7].values
y = dataset.iloc[:, 0].values

from sklearn.preprocessing import LabelEncoder, OneHotEncoder
labelencoder = LabelEncoder()
x[:, 1] = labelencoder.fit_transform(x[:, 1])
x[:, 5] = labelencoder.fit_transform(x[:, 5])
onehotencoder1 = OneHotEncoder(categorical_features = [1])
x = onehotencoder1.fit_transform(x).toarray()
onehotencoder2 = OneHotEncoder(categorical_features = [6])
x = onehotencoder2.fit_transform(x).toarray()

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)

from sklearn.ensemble import RandomForestClassifier
classifier = RandomForestClassifier(n_estimators = 48, criterion = 'entropy', random_state = 0)
classifier.fit(x_train, y_train)
y_pred_RF = classifier.predict(x_test)

from sklearn.metrics import confusion_matrix
cm_RF = confusion_matrix(y_test, y_pred_RF)
from sklearn.metrics import accuracy_score
accuracyRF = accuracy_score(y_test, y_pred_RF)

from sklearn.model_selection import cross_val_score
accuracies = cross_val_score(estimator = classifier, X = x_train, y = y_train, cv = 10)
Mean_accuracy = accuracies.mean()
STD_accuracy = accuracies.std()

from sklearn.model_selection import GridSearchCV
parameters = [{'n_estimators': [10, 50, 100, 150, 200], 'criterion': ['gini']},
              {'n_estimators': [10, 50, 100, 150, 200], 'criterion': ['entropy']}]
grid_search = GridSearchCV(estimator = classifier,
                           param_grid = parameters,
                           scoring = 'accuracy',
                           cv = 10)
grid_search = grid_search.fit(x_train, y_train)
best_accuracy = grid_search.best_score_
best_parameters = grid_search.best_params_

from sklearn.model_selection import GridSearchCV
parameters = [{'n_estimators': [45,46,47,48,49,50], 'criterion': ['gini']}]
grid_search = GridSearchCV(estimator = classifier,
                           param_grid = parameters,
                           scoring = 'accuracy',
                           cv = 10)
grid_search = grid_search.fit(x_train, y_train)
best_accuracy = grid_search.best_score_
best_parameters = grid_search.best_params_



